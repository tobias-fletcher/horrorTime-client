'use strict';
import   "cac9565c4902e3ae791e933da23b8c2f:./Cancel";
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function $cac9565c4902e3ae791e933da23b8c2f$var$CancelToken(executor) {
    if (typeof executor !== 'function') throw new TypeError('executor must be a function.');
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new $cac9565c4902e3ae791e933da23b8c2f$import$93591ac7a14ca706(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ $cac9565c4902e3ae791e933da23b8c2f$var$CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ $cac9565c4902e3ae791e933da23b8c2f$var$CancelToken.source = function source() {
    var cancel;
    var token = new $cac9565c4902e3ae791e933da23b8c2f$var$CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
$cac9565c4902e3ae791e933da23b8c2f$exports = $cac9565c4902e3ae791e933da23b8c2f$var$CancelToken;
