/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ 'use strict';
/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */ var $12251fc6d5cd7645c0c3db4d4771ef37$var$__DEV__ = false;
var $12251fc6d5cd7645c0c3db4d4771ef37$var$warning = function() {
};
if ($12251fc6d5cd7645c0c3db4d4771ef37$var$__DEV__) {
    var $12251fc6d5cd7645c0c3db4d4771ef37$var$printWarning = function printWarning(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for(var key = 1; key < len; key++)args[key - 1] = arguments[key];
        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function() {
            return args[argIndex++];
        });
        if (typeof console !== 'undefined') console.error(message);
        try {
            // --- Welcome to debugging React ---
            // This error was thrown as a convenience so that you can use this stack
            // to find the callsite that caused this warning to fire.
            throw new Error(message);
        } catch (x) {
        }
    };
    $12251fc6d5cd7645c0c3db4d4771ef37$var$warning = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for(var key = 2; key < len; key++)args[key - 2] = arguments[key];
        if (format === undefined) throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
        if (!condition) $12251fc6d5cd7645c0c3db4d4771ef37$var$printWarning.apply(null, [
            format
        ].concat(args));
    };
}
$12251fc6d5cd7645c0c3db4d4771ef37$exports = $12251fc6d5cd7645c0c3db4d4771ef37$var$warning;
