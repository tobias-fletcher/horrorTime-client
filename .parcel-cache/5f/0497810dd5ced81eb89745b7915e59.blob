import   "b81ba44106f6eb2cb6cdf2fb6c2cbde5:@babel/runtime/helpers/esm/objectSpread2";
/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(code) {
    return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
}
// Inlined version of the `symbol-observable` polyfill
var $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$$$observable = function() {
    return typeof Symbol === 'function' && Symbol.observable || '@@observable';
}();
/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */ var $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$randomString = function randomString() {
    return Math.random().toString(36).substring(7).split('').join('.');
};
var $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675 = {
    INIT: "@@redux/INIT" + $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$randomString(),
    REPLACE: "@@redux/REPLACE" + $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$randomString(),
    PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$randomString();
    }
};
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$isPlainObject(obj) {
    if (typeof obj !== 'object' || obj === null) return false;
    var proto = obj;
    while(Object.getPrototypeOf(proto) !== null)proto = Object.getPrototypeOf(proto);
    return Object.getPrototypeOf(obj) === proto;
}
function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$kindOf(val) {
    var typeOfVal = typeof val;
    var val1, type, constructorName, val2, val3, val4;
    return typeOfVal;
}
/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$9da1c8fdab7958ac(reducer, preloadedState, enhancer) {
    var _ref2;
    if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(0));
    if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
        enhancer = preloadedState;
        preloadedState = undefined;
    }
    if (typeof enhancer !== 'undefined') {
        if (typeof enhancer !== 'function') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(1));
        return enhancer($b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$9da1c8fdab7958ac)(reducer, preloadedState);
    }
    if (typeof reducer !== 'function') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(2));
    var currentReducer = reducer;
    var currentState = preloadedState;
    var currentListeners = [];
    var nextListeners = currentListeners;
    var isDispatching = false;
    /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */ function ensureCanMutateNextListeners() {
        if (nextListeners === currentListeners) nextListeners = currentListeners.slice();
    }
    /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */ function getState() {
        if (isDispatching) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(3));
        return currentState;
    }
    /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */ function subscribe(listener) {
        if (typeof listener !== 'function') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(4));
        if (isDispatching) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(5));
        var isSubscribed = true;
        ensureCanMutateNextListeners();
        nextListeners.push(listener);
        return function unsubscribe() {
            if (!isSubscribed) return;
            if (isDispatching) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(6));
            isSubscribed = false;
            ensureCanMutateNextListeners();
            var index = nextListeners.indexOf(listener);
            nextListeners.splice(index, 1);
            currentListeners = null;
        };
    }
    /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */ function dispatch(action) {
        if (!$b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$isPlainObject(action)) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(7));
        if (typeof action.type === 'undefined') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(8));
        if (isDispatching) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(9));
        try {
            isDispatching = true;
            currentState = currentReducer(currentState, action);
        } finally{
            isDispatching = false;
        }
        var listeners = currentListeners = nextListeners;
        for(var i = 0; i < listeners.length; i++){
            var listener = listeners[i];
            listener();
        }
        return action;
    }
    /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */ function replaceReducer(nextReducer) {
        if (typeof nextReducer !== 'function') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(10));
        currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
        // Any reducers that existed in both the new and old rootReducer
        // will receive the previous state. This effectively populates
        // the new state tree with any relevant data from the old one.
        dispatch({
            type: $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675.REPLACE
        });
    }
    /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */ function observable() {
        var _ref;
        var outerSubscribe = subscribe;
        return _ref = {
            /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */ subscribe: function subscribe1(observer) {
                if (typeof observer !== 'object' || observer === null) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(11));
                function observeState() {
                    if (observer.next) observer.next(getState());
                }
                observeState();
                var unsubscribe = outerSubscribe(observeState);
                return {
                    unsubscribe: unsubscribe
                };
            }
        }, _ref[$b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$$$observable] = function() {
            return this;
        }, _ref;
    } // When a store is created, an "INIT" action is dispatched so that every
    // reducer returns their initial state. This effectively populates
    // the initial state tree.
    dispatch({
        type: $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675.INIT
    });
    return _ref2 = {
        dispatch: dispatch,
        subscribe: subscribe,
        getState: getState,
        replaceReducer: replaceReducer
    }, _ref2[$b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$$$observable] = observable, _ref2;
}
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$warning(message) {
    /* eslint-disable no-console */ if (typeof console !== 'undefined' && typeof console.error === 'function') console.error(message);
    /* eslint-enable no-console */ try {
        // This error was thrown as a convenience so that if you enable
        // "break on all exceptions" in your console,
        // it would pause the execution at this line.
        throw new Error(message);
    } catch (e) {
    } // eslint-disable-line no-empty
}
function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
    var reducerKeys = Object.keys(reducers);
    var argumentName = action && action.type === $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';
    if (reducerKeys.length === 0) return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
    if (!$b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$isPlainObject(inputState)) return "The " + argumentName + " has unexpected type of \"" + $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
    var unexpectedKeys = Object.keys(inputState).filter(function(key) {
        return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
    });
    unexpectedKeys.forEach(function(key) {
        unexpectedKeyCache[key] = true;
    });
    if (action && action.type === $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675.REPLACE) return;
    if (unexpectedKeys.length > 0) return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
}
function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$assertReducerShape(reducers) {
    Object.keys(reducers).forEach(function(key) {
        var reducer = reducers[key];
        var initialState = reducer(undefined, {
            type: $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675.INIT
        });
        if (typeof initialState === 'undefined') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(12));
        if (typeof reducer(undefined, {
            type: $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$98cb62444771a675.PROBE_UNKNOWN_ACTION()
        }) === 'undefined') throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(13));
    });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$9ad8f5dc3065c117(reducers) {
    var reducerKeys = Object.keys(reducers);
    var finalReducers = {
    };
    for(var i = 0; i < reducerKeys.length; i++){
        var key = reducerKeys[i];
        if (typeof reducers[key] === 'function') finalReducers[key] = reducers[key];
    }
    var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
    // keys multiple times.
    var unexpectedKeyCache;
    var shapeAssertionError;
    try {
        $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$assertReducerShape(finalReducers);
    } catch (e) {
        shapeAssertionError = e;
    }
    return function combination(state, action) {
        if (state === void 0) state = {
        };
        if (shapeAssertionError) throw shapeAssertionError;
        var warningMessage;
        var hasChanged = false;
        var nextState = {
        };
        for(var _i = 0; _i < finalReducerKeys.length; _i++){
            var _key = finalReducerKeys[_i];
            var reducer = finalReducers[_key];
            var previousStateForKey = state[_key];
            var nextStateForKey = reducer(previousStateForKey, action);
            if (typeof nextStateForKey === 'undefined') {
                var actionType = action && action.type;
                throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(14));
            }
            nextState[_key] = nextStateForKey;
            hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
        }
        hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
        return hasChanged ? nextState : state;
    };
}
function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$bindActionCreator(actionCreator, dispatch) {
    return function() {
        return dispatch(actionCreator.apply(this, arguments));
    };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$d3370eeb38663654(actionCreators, dispatch) {
    if (typeof actionCreators === 'function') return $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$bindActionCreator(actionCreators, dispatch);
    if (typeof actionCreators !== 'object' || actionCreators === null) throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(16));
    var boundActionCreators = {
    };
    for(var key in actionCreators){
        var actionCreator = actionCreators[key];
        if (typeof actionCreator === 'function') boundActionCreators[key] = $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$bindActionCreator(actionCreator, dispatch);
    }
    return boundActionCreators;
}
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$452ae967caf14641() {
    for(var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++)funcs[_key] = arguments[_key];
    if (funcs.length === 0) return function(arg) {
        return arg;
    };
    if (funcs.length === 1) return funcs[0];
    return funcs.reduce(function(a, b) {
        return function() {
            return a(b.apply(void 0, arguments));
        };
    });
}
/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$2df2f0d20e83d974() {
    for(var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++)middlewares[_key] = arguments[_key];
    return function(createStore) {
        return function() {
            var store = createStore.apply(void 0, arguments);
            var _dispatch = function dispatch() {
                throw new Error($b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$formatProdErrorMessage(15));
            };
            var middlewareAPI = {
                getState: store.getState,
                dispatch: function dispatch1() {
                    return _dispatch.apply(void 0, arguments);
                }
            };
            var chain = middlewares.map(function(middleware) {
                return middleware(middlewareAPI);
            });
            _dispatch = $b81ba44106f6eb2cb6cdf2fb6c2cbde5$export$452ae967caf14641.apply(void 0, chain)(store.dispatch);
            return $b81ba44106f6eb2cb6cdf2fb6c2cbde5$import$32d4698e5c8c6078$9099ad97b570f7c($b81ba44106f6eb2cb6cdf2fb6c2cbde5$import$32d4698e5c8c6078$9099ad97b570f7c({
            }, store), {
            }, {
                dispatch: _dispatch
            });
        };
    };
}
/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */ function $b81ba44106f6eb2cb6cdf2fb6c2cbde5$var$isCrushed() {
}
